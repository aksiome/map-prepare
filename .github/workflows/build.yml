name: build

on:
  push:
    branches: [ pyinstaller ]

jobs:
  createrelease:
    name: Create Release
    runs-on: [ubuntu-latest]
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release from ${{ github.sha }}
        draft: false
        prerelease: false
    - name: Output Release URL File
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
    - name: Save Release URL File for publish
      uses: actions/upload-artifact@v1
      with:
        name: release_url
        path: release_url.txt

  build:
    name: Build packages
    needs: createrelease
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            TARGET: macos
            CMD_BUILD: >
                pyinstaller --clean --hidden-import nbt.world --hidden-import map_prepare.lib.logger --hidden-import anvil --hidden-import zipfile --hidden-import map_prepare.lib.utils --hidden-import map_prepare.lib.in_memory_zipfile --add-data "map_prepare/global-settings.json:map_prepare" --add-data "map_prepare/default-config.json:map_prepare" --add-data "map_prepare/modules:map_prepare/modules" -F -n map_prepare map_prepare/__main__.py &&
                cd dist/ &&
                zip -r9 map_prepare map_prepare.app/
            OUT_FILE_NAME: map_prepare.zip
            ASSET_MIME: application/zip
          - os: windows-latest
            TARGET: windows
            CMD_BUILD: pyinstaller --clean --hidden-import nbt.world --hidden-import map_prepare.lib.logger --hidden-import anvil --hidden-import zipfile --hidden-import map_prepare.lib.utils --hidden-import map_prepare.lib.in_memory_zipfile --add-data "map_prepare/global-settings.json;map_prepare" --add-data "map_prepare/default-config.json;map_prepare" --add-data "map_prepare/modules;map_prepare/modules" -F -n map_prepare map_prepare/__main__.py
            OUT_FILE_NAME: map_prepare.exe
            ASSET_MIME: application/vnd.microsoft.portable-executable
          - os: ubuntu-latest
            TARGET: x86_64-linux-gnu
            CMD_BUILD: pyinstaller --clean --hidden-import nbt.world --hidden-import map_prepare.lib.logger --hidden-import anvil --hidden-import zipfile --hidden-import map_prepare.lib.utils --hidden-import map_prepare.lib.in_memory_zipfile --add-data "map_prepare/global-settings.json:map_prepare" --add-data "map_prepare/default-config.json:map_prepare" --add-data "map_prepare/modules:map_prepare/modules" -F -n map_prepare map_prepare/__main__.py
            OUT_FILE_NAME: map_prepare
            ASSET_MIME: application/octet-stream
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
    - name: Install pyinstaller
      run: python -m pip install pyinstaller
    - name: Build with pyinstaller for ${{matrix.TARGET}}
      run: ${{matrix.CMD_BUILD}}
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release File Name & Upload URL
      id: get_release_info
      shell: bash
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./dist/${{ matrix.OUT_FILE_NAME}}
        asset_name: ${{ matrix.OUT_FILE_NAME}}
        asset_content_type: ${{ matrix.ASSET_MIME}}
